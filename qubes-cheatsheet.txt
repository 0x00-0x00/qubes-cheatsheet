VM Management

qvm-block

- _list/set VM PCI devices_

usage:

-   qvm-block -l [options]

-   qvm-block -a [options] <device> <vm-name>

-   qvm-block -d [options] <device>

-   qvm-block -d [options] <vm-name>

---

qvm-block -A personal dom0:/home/user/extradisks/data.img - _attaches an
additional storage for the personal-vm_

qvm-clone

- _clones an existing VM by copying all its disk files_

usage: qvm-clone [options] <existing-vm-name> <new-clone-vm-name>

---

qvm-clone fedora-21 fedora-21-dev - _create a clone of fedora-21 called
fedora-21-dev_

qvm-firewall

- _manage VM’s firewall rules_

usage: qvm-firewall -l [-n] <vm-name>

---

qvm-firewall -l personal - _displays the firewall settings for the
personal-vm_

qvm-firewall -l -n fedora-21 - _displays the firewall settings for the
personal-vm with port numbers_

qvm-ls

- _list VMs and various information about their state_

usage: qvm-ls [options] <vm-name>

---

qvm-ls - _lists all vms_

qvm-ls -n - _show network addresses assigned to VMs_

qvm-ls -d - _show VM disk utilization statistics_

qvm-prefs

- _list/set various per-VM properties_

usage:

-   qvm-prefs -l [options] <vm-name>

-   qvm-prefs -s [options] <vm-name> <property> [...]

---

qvm-prefs win7-copy - _lists the preferences of the win7-copy_

qvm-prefs win7-copy -s mac 00:16:3E:5E:6C:05 - _sets a new mac for the
network card_

qvm-prefs lab-win7 -s qrexec_installed true - _sets the qrexec to
installed_

qvm-prefs lab-win7 -s qrexec_timeout 120 - _usefull for windows hvm
based vms_

qvm-prefs lab-win7 -s default_user joanna - _sets the login user_

qvm-run

- _runs a specific command on a vm_

usage: qvm-run [options] [<vm-name>] [<cmd>]

---

qvm-run personal xterm - _runs xterm on personal_

qvm-run personal xterm --pass-io - _runs xterm and passes all
sdtin/stdout/stderr to the terminal_

qvm-run personal "sudo yum update" --pass-io --nogui - _pass a specific
command directly to the VM_

qvm-start

- _starts a vm_

usage: qvm-start [options] <vm-name>

---

qvm-start personal - _starts the personal-vm_

qvm-start ubuntu --cdrom personal:/home/user/Downloads/ubuntu-14.04.iso -
_starts the ubuntu-vm with the ubuntu installation CD_

qvm-sync-appmenus

- _updates desktop file templates for given StandaloneVM or TemplateVM_

usage: qvm-sync-appmenus [options] <vm-name>

---

qvm-sync-appmenus archlinux-template - _useful for custom .desktop files
or distributions not using yum_

Dom0

qubes-dom0-update

- _updates software in dom0_

usage:
qubes-dom0-update [--clean][--check-only][--gui] [<yum opts>][<pkg list>]

---

sudo qubes-dom0-update - _updates dom0_

sudo qubes-dom0-update qubes-windows-tools - _install the windows tools_

sudo qubes-dom0-update --action=search qubes-template - _search for all
qubes templates_

sudo qubes-dom0-update kernel-3.19* - _install the official Fedora
kernel-3.19* with Xen support_

qubes-hcl-report

- _generates a report about the hardware information_

usage: qubes-hcl-report [<vm-name>]

---

qubes-hcl-report - _prints the hardware information on the console
(terminal)_

qubes-hcl-report personal - _sends the hardware information to the
personal-vm under /home/user _

virsh

- _management user tool for libvirt (hypervisor abstraction)_

usage: virsh -c xen:/// <command> [<vm-name>]

EXAMPLE

_Why? Connect if GUI/qrexec does not work for any reason. This way you
can restart/investigate a failed service._

-   In Dom0 terminal: virsh -c xen:/// console personal

-   username: ROOT without a password

_(and when #1130 would be implmented the same for “user”)_

xl

- _Xen management tool, based on LibXenlight_

usage: xl <subcommand> [<args>]

---

xl dmesg - _Dom0 dmesg output (first place to look for warning or error
messages)_

xl top - _Monitor host and domains in realtime_

DomU

qvm-copy-to-vm

- Copy file from one VM to another VM

usage: qvm-copy-to-vm <vm-name> <file> [<file+>] - _file_ can be a
single file or a folder

---

qvm-copy-to-vm work Documents - _copy the Documents folder to the work
VM_

qvm-copy-to-vm personal text.txt - _copy the text.txt file to the
personal VM_

EXAMPLE

-   Open a terminal in AppVM A (e. g. your personal vm)
-   Let’s assume we want to copy the Documents folder to AppVM B (e. g.
    your work VM)
-   The command would be: qvm-copy-to-vm work Documents

DomU and Dom0

List installed qubes packages

FEDORA

In VM or Dom0: rpm -qa \*qubes-\* - _list (qubes-) installed packages_

Copy from & to Dom0

Copy from: DOM0 -> VM

    cat /path/to/file_in_dom0 |
     qvm-run --pass-io <dst_domain>
      'cat > /path/to/file_name_in_appvm'

EXAMPLE:

    @dom0 Pictures]$ cat my-screenshot.png | 
    qvm-run --pass-io personal 
    'cat > /home/user/my-screenshot.png'

---

Copy from: VM -> DOM0

    qvm-run --pass-io <src_domain>
     'cat /path/to/file_in_src_domain' >
      /path/to/file_name_in_dom0

Copy text between VM A and B

_On VM A (source):_

1.  CTRL+C
2.  CTRL+SHIFT+C

_On VM B (destination):_

3.  CTRL+SHIFT+V
4.  CTRL+V

Grow disk

qvm-grow-private

- _increase private storage capacity of a specified VM_

usage: qvm-grow-private <vm-name> <size>

EXAMPLE

-   In dom0 konsole: qvm-grow-private personal 40GB
-   In the personal VM: sudo resize2fs /dev/xvdb

AppVMs and TMPFS

Enlarge /tmp if you run out of space on the default ~200MB

sudo mount -o remount,size=1024M /tmp - _enlarge the space to 1024MB_

Inter VM Networking

- _Does not expose services to the outside world!_

Make sure:

-   Both VMs are connected to the same firewall VM
-   Qubes IP addresses are assigned to both VMs
-   Both VMs are started

In Firewall VM terminal:

    $ sudo iptables -I FORWARD 2 -s <IP address of A> -d <IP address of B> -j ACCEPT

-   The connection will be unidirectional A -> B
-   Optional: Bidirectional A <-> B

In Firewall VM terminal:

    $ sudo iptables -I FORWARD 2 -s <IP address of B> -d <IP address of A> -j ACCEPT

-   Check your settings (e. g. using ping)
-   Persist your settings:

    Assume:
      IP of A: 10.137.2.10
      IP of B: 10.137.2.11

In Firewall VM terminal:

    $ sudo bash
    # echo "iptables -I FORWARD 2 -s 10.137.2.10 -d 10.137.2.11 -j ACCEPT" >> /rw/config/qubes_firewall_user_script
    #chmod +x /rw/config/qubes_firewall_user_script

for bidirectional access:

    # echo "iptables -I FORWARD 2 -s 10.137.2.10 -d 10.137.2.11 -j ACCEPT" >> /rw/config/qubes_firewall_user_script

Add USB Wifi card to sys-net VM

* - _attach a USB Wifi card to sys-net VM_

The bus and device number can be different than shown in this example:

1.  qvm-pci -l sys-net - _list all attached pci devices of sys-net_
2.  lsusb - _e. g._ BUS 003 _Device 003: ID 148f:2870 Ralink Technology,
    Corp. RT2870 Wireless Adapter_
3.  readlink /sys/bus/usb/devices/003 - _Important Bus 003 -> 003_
4.  The result of readlink:
    ../../../devices/pci-0/pci0000:00/0000:00:12.2/usb3 - _Important
    00:12.2_
5.  qvm-pci -a sys-net 00:12.2 - _attach USB device 00:12.2 to sys-net_
6.  qvm-pci -l sys-ne - _check if device 00:12.2_ is

Templates

Fedora

- _Fedora template specific_

UPDATING, SEARCHING & INSTALLING PACKAGES

-   installing packages: yum install <package-name>
-   search for a package: yum search <package-or-word>
-   updating template: yum update

REPOSITORIES

Repositories:
Start Menu >> Template:Fedora 21 >> Package Sources >> Enable third party repositories

Start Menu >> Template:Fedora 21 >> Package Sources >> Enable RPMFusion -
ENABLE RPMFusion, (already covers RPMFusion signing keys)

Fedora Minimal

- _Fedora minimal template_

sudo qubes-dom0-update qubes-template-fedora-21-minimal - _installs the
fedora-21-minimal template_

Debian

- _Debian templates_

INSTALLING THE TEMPLATE

-   sudo qubes-dom0-update qubes-template-debian-7 - _Debian 7 “Wheezy”_
-   sudo qubes-dom0-update qubes-template-debian-8 - _Debian 8 “Jessie”_

UPDATING, SEARCHING & INSTALLING PACKAGES

-   installing packages: apt-get install <package-name>
-   search for a package: apt-cache search <package-or-word>
-   updating template:
    1.  apt-get update
    2.  apt-get dist-upgrade

Qubes OS + Whonix

- _Whonix is an debian based OS focused on anonymity, privacy and
security_

Whonix has to parts:

1.  Whonix-Gateway (uses TOR for all connections to the outside world)
2.  Whonix-Workstation (for application)

INSTALL WHONIX

Whonix-Gateway TemplateVM Binary Install @Dom0:

sudo qubes-dom0-update --enablerepo=qubes-templates-community qubes-template-whonix-gw-experimental

Whonix-Workstation TemplateVM Binary Install @Dom0:

1.  export UPDATES_MAX_BYTES=$[ 4 * 1024 ** 3 ]
2.  sudo qubes-dom0-update --enablerepo=qubes-templates-community qubes-template-whonix-ws

NEXT STEPS

1.  Create a Whonix-gateway ProxyVM, through Qubes VM Manager
2.  Create a Whonix-workstation AppVM, through Qubes VM Manager
3.  Update your Whonix-Gateway and Whonix-Workstation TemplateVMs (how
    to -> see debian)
4.  (Re)Start Whonix-Gateway ProxyVM
5.  Start Whonix-Workstation AppVM

Archlinux Minimal

- _Archlinux minimal template_

INSTALLING THE TEMPLATE

1.  In a VM:

        wget http://olivier.medoc.free.fr/rpm/noarch/
        qubes-template-archlinux-minimal-3.0.3-201507281153.noarch.rpm

2.  Copy RPM-Package to Dom0
3.  In Dom0:
    sudo rpm -i qubes-template-archlinux-minimal-3.0.3-201507281153.noarch.rpm

UPDATING, SEARCHING & INSTALLING PACKAGES

-   installing packages:
    pacman -S <package-name> [<package-name-2>...<package-name-n>]
-   search for a package: pacman -Ss <package-or-word>
-   updating template: pacman -Syyu

Create VM from VMware or VirtualBox images

1.  Download the image in an AppVM
2.  Install qemu-img tools - _e. g. yum install qemu-img for fedora_
3.  Convert the image to a raw format:
    -   VMware: qemu-img convert ReactOS.vmdk -O raw reactos.img
    -   VirtualBox: qemu-img convert ReactOS.vdi -O raw reactos.img
